////////////////////////////////////
//					Mixins 								//
////////////////////////////////////


// ============== BEM selectors ==================

@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// ============= Flexbox Settings =================

@mixin 	container-flex-end {
	@extend %container-flex; 
	justify-content: flex-end;
}
@mixin 	container-flex-between {
	@extend %container-flex; 
	justify-content: space-between;
}
@mixin 	container-flex-center {
	@extend %container-flex; 
	justify-content: center;
}

@mixin 	container-flex-around {
	@extend %container-flex; 
	justify-content: space-around;
}

// ============= Themed color classes =============

// UI theme colors for buttons, etc
@mixin ui-colors($map) {
	// $map = which color map to sort through	
	@each $theme, $color in $map {
    	@include m($theme) {
      		background-color: $color;
    	}
  	}
}

// ============= Media Queries ====================

@mixin mq($break) {
	// $break = media size, accepts small, medium, and large only. 
		// -any other value will throw an error
	@if $break == "small" {
		@media (min-width: $brkpoint--sm) {
		  	@content;
			}
	} @else if $break == "medium" {
		@media (min-width: $brkpoint--md) {
		  	@content;
			}
	} @else if $break == "large" {
		@media (min-width: $brkpoint--lg) {
			@content;
			}
	} @else if $break == "x-large" {
		@media (min-width: $brkpoint--x-lg) {
			@content;
			}	
	} @else {
		@error "`#{$break}` is not an acceptable value. Must be 'small' 'medium' 'large' or 'x-large'. "
	}
}


// ============= Grid Columns ======================

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate and output the column modifier classes 
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Adjacent sibling margins
@mixin doubly($margin: 1em) {
 	// $margin(optional) : margin, defaults to 1em;
	& + & {
		margin-left: $margin;
		@content;
	}
}


// ============= Generic Helper Mixins ============

//	set left and right padding in one step
@mixin pad-left-right($left : 15px, $right: null) {
	// $left(optional) : left padding, defaults to 15px
	// $right(optional) : right padding, defaults to null
	@if ($right == null) { 	// if no value is given for $right make padding equal on both sides
		$right : $left
	}
	padding-left: $left;
	padding-right: $right;
}

//	set top and bottom padding in one step
@mixin pad-top-bottom($top : 15px, $bottom: null) {
	// $top(optional) : top padding, defaults to 15px
	// $bottom(optional) : bottom padding, defaults to null
	@if ($bottom == null) {	// if no value is given for $bottom make padding equal on top and bottom
		$bottom : $top
	}
	padding-top: $top;
	padding-bottom: $bottom;
}

//	set left and right margin in one step
@mixin margin-left-right($left : 15px, $right: null) {
	// $left(optional) : left margin, defaults to 15px
	// $right(optional) : right margin, defaults to null
	@if ($right == null) { 	// if no value is given for $right make padding equal on both sides
		$right : $left
	}

	margin-left: $left;
	margin-right: $right;
}

//	set top and bottom margin in one step
@mixin margin-top-bottom($top : 15px, $bottom: null) {
	// $top(optional) : top margin, defaults to 15px
	// $bottom(optional) : bottom margin in pixels, defaults to null
	@if ($bottom == null) {	// if no value is given for $bottom make margin equal on top and bottom
		$bottom : $top
	}
	margin-top: $top;
	margin-bottom: $bottom;
}

// Skill pills background colors
@mixin skill-colors($map) {
	// $map = which color map to sort through	
	$i : 1; // temporary increment variable
	@each $color in $map {
		@include m("#{$i}") {
   		background-color: $color;
    }
		$i : $i + 1;
  }
}


